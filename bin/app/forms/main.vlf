Form MainForm
    size: [$SCREEN->width / 1.2, $SCREEN->height / 1.2]
    windowState: fwsMaximized
    startPosition: fspCenterScreen
    backgroundColor: clWhite

    caption: 'VoidStudio'

    ->icon->loadFromFile (APP_DIR .'/system/icons/Icon.ico')

    SplitContainer PropertiesPanel__Container
        dock: dsFill

        panel1MinSize: 0
        splitterDistance: 220

        # Свойства

        Panel PropertiesPanel (PropertiesPanel__Container->panel1)
            dock: dsFill
            width: 280

            ToolStripMenuItem PropertiesList__ListMenuItem ('Сбросить')
                image: (new Image)->loadFromFile (APP_DIR .'/system/icons/Undo_16x.png')

                ClickEvent:^ function ($self)
                    {
                        c('PropertiesList__List')->resetSelectedProperty ();
                    }

            ContextMenuStrip PropertiesList__ListMenu ()
                ->items->add (PropertiesList__ListMenuItem)

            TabPage PropertiesList__Page ('Свойства')
                backgroundColor: clWhite

                PropertyGrid PropertiesList__List
                    dock: dsFill
                    backgroundColor: clWhite
                    helpBackColor: clWhite
                    helpBorderColor: clWhite
                    # tabcontrolVisible: false

                    controls[2]->contextMenuStrip: c('PropertiesList__ListMenu')

                    PropertyValueChangedEvent:^ function ($self, $args)
                        {
                            $designer    = VoidStudioAPI::getObjects ('main')['Designer__'. c('Designer__FormsList')->selectedTab->text .'Designer'];
                            $objectClass = $self->selectedObject->getType ()->toString ();
                            $newValue    = $args->changedItem->value;

                            if ($args->changedItem->label == '(Name)')
                            {
                                if ($objectClass == 'System.Windows.Forms.Form')
                                {
                                    $designer->renameComponent ($self->selectedObject->selector, $args->oldValue, $args->oldValue);
                                    $self->selectedObject->name = $args->oldValue;

                                    pre ('Нельзя переименовывать формы проекта');
                                }
                                
                                elseif (substr ($newValue, 0, 4) == 'Form')
                                    {
                                        $designer->renameComponent ($self->selectedObject->selector, $args->oldValue, $args->oldValue);

                                        try
                                        {
                                            $self->selectedObject->name = $args->oldValue;
                                        }

                                        catch (\Throwable $e) {}

                                        pre ('Объекту нельзя задать название, начинающееся на "Form"');
                                    }

                                else try
                                {
                                    $designer->renameComponent ($self->selectedObject->selector, $newValue, $args->oldValue);

                                    try
                                    {
                                        $self->selectedObject->name = $newValue;
                                    }

                                    catch (\Throwable $e) {}
                                }

                                catch (\Throwable $e)
                                {
                                    $designer->renameComponent ($self->selectedObject->selector, $args->oldValue, $args->oldValue);

                                    try
                                    {
                                        $self->selectedObject->name = $args->oldValue;
                                    }

                                    catch (\Throwable $e) {}

                                    pre ('Произошла ошибка при попытке переименования объекта');
                                }

                                $components = c('PropertiesPanel__SelectedComponent');

                                $components->items->clear ();
                                $components->items->addRange (array_keys ($designer->objects));

                                $components->selectedItem = $designer->getComponentName ($self->selectedObject->selector);
                            }
                        }
            
            ToolStripMenuItem EventsList__ListMenuItem ('Удалить')
                image: (new Image)->loadFromFile (APP_DIR .'/system/icons/Delete_16x.png')

                ClickEvent:^ function ($self)
                    {
                        $eventsList = c('EventsList__ActiveEvents');

                        Events::removeObjectEvent ($eventsList->selectedObject->selector, $eventsList->selectedGridItem->propertyDescriptor->customProperty->name);
                        $eventsList->selectedGridItem->propertyDescriptor->customProperty->value = '';

                        unset (VoidStudioAPI::$events[$eventsList->selectedObject->selector][$eventsList->selectedGridItem->propertyDescriptor->customProperty->name]);

                        $eventsList->refresh ();
                    }

            ContextMenuStrip EventsList__ListMenu ()
                ->items->add (EventsList__ListMenuItem)

            TabPage EventsList__Page ('События')
                backgroundColor: clWhite

                EventGrid EventsList__ActiveEvents
                    dock: dsFill
                    toolbarVisible: false
                    backgroundColor: clWhite
                    helpBackColor: clWhite
                    helpBorderColor: clWhite

                    controls[2]->contextMenuStrip: c('EventsList__ListMenu')

                    EventClickEvent:^ function ($self, $args)
                        {
                            VoidStudioAPI::openEventEditor ($self->selectedObject->selector, $args->customProp->name, VoidStudioAPI::getObjects ('main')['Designer__'. c('Designer__FormsList')->selectedTab->text .'Designer']);
                            
                            $args->retVal = '(добавлено)';
                        }

            # BUG: неверно подгружаются родители компонентов, приходится их отдельно указывать

            TabControl Properties__Items (PropertiesPanel)
                dock: dsFill
                hotTrack: true

                ->items->addRange ([PropertiesList__Page, EventsList__Page])

            ComboBox PropertiesPanel__SelectedComponent (PropertiesPanel)
                dock: dsTop
                dropDownStyle: ddDropDownList
                flatStyle: flPopup
                backgroundColor: clLight

                ->items->add ('Form1')
                selectedItem: 'Form1'

                SelectedIndexChangedEvent:^ function ($self)
                    {
                        try
                        {
                            $designer = VoidStudioAPI::getObjects ('main')['Designer__'. c('Designer__FormsList')->selectedTab->text .'Designer'];

                            try
                            {
                                PropertiesList__List->selectedObject = $designer->getComponentByName ($self->selectedItem);
                            }

                            catch (\Throwable $e)
                            {
                                if ($self->selectedItem)
                                    $designer->removeComponentHistoryByName ($self->selectedItem);

                                $self->items->clear ();
                                $self->items->addRange (array_keys ($designer->objects));
                                $self->selectedItem = $self->items[0];
                            }
                        }

                        catch (\Throwable $e) {}
                    }

                SelectionChangeCommittedEvent:^ function ($self)
                    {
                        try
                        {
                            $designer = VoidStudioAPI::getObjects ('main')['Designer__'. c('Designer__FormsList')->selectedTab->text .'Designer'];

                            try
                            {
                                $designer->setSelectedComponents ($designer->getComponentByName ($self->selectedItem));

                            }

                            catch (\Throwable $e)
                            {
                                if ($self->selectedItem)
                                    $designer->removeComponentHistoryByName ($self->selectedItem);

                                $self->items->clear ();
                                $self->items->addRange (array_keys ($designer->objects));
                                $self->selectedItem = $self->items[0];
                            }
                        }

                        catch (\Throwable $e) {}
                    }

        # Компоненты и дизайнер

        SplitContainer ComponentsPanel__Contrainer (PropertiesPanel__Container->panel2)
            dock: dsFill

            panel2MinSize: 0
            splitterDistance: MainForm->w - PropertiesPanel__Container->splitterDistance - 220

            # Лог и дизайнер

            SplitContainer ToolsPanel__Container (ComponentsPanel__Contrainer->panel1)
                dock: dsFill

                orientation: 0
                splitterDistance: MainForm->h - 180
                panel2MinSize: 0

                TabPage Designer__Form1 ('Form1')
                    backgroundColor: clWhite

                TabControl Designer__FormsList (ToolsPanel__Container->panel1)
                    dock: dsFill
                    hotTrack: true

                    ->items->add (Designer__Form1)

                    SelectedIndexChangedEvent:^ function ($self) use (PropertiesPanel__SelectedComponent $components, EventsList__ActiveEvents $eventsList)
                        {
                            if ($self->items->count > 0)
                            {
                                $designer = VoidStudioAPI::getObjects ('main')['Designer__'. ($tab = $self->selectedTab->text) .'Designer'];
                                $designer->focus ();

                                $components->items->clear ();
                                $components->items->addRange (array_keys ($designer->objects));

                                $components->selectedItem = $tab;
                                $designer->setSelectedComponents ($designer->form);
                            }
                        }

                VoidDesigner Designer__Form1Designer (Designer__Form1, 'Form1', PropertiesList__List, EventsList__ActiveEvents, PropertiesPanel__SelectedComponent, Designer__FormsList)
                    ->initDesigner ()

                TabPage ToolsPanel__Log ('Лог')
                    ListBox ToolsPanel__LogList
                        dock: dsFill
                        horizontalScrollbar: true

                TabPage ToolsPanel__EvalPHP ('Выполнение PHP кода')
                    FastColoredTextBox ToolsPanel__EvalPHPEditor
                        dock: dsFill

                        language: langPHP
                        wordWrap: true

                    Button ToolsPanel__EvalPHPButton
                        dock: dsBottom
                        height: 24

                        flatStyle: flFlat
                        flatAppearance->borderColor: clDodgerBlue
                        flatAppearance->mouseOverBackColor: clLight
                        flatAppearance->mouseDownBackColor: clLight + 10

                        text: 'Выполнить'

                        ClickEvent:^ function ($self) use (ToolsPanel__EvalPHPEditor $editor)
                            {
                                file_put_contents ('system/settings/last_eval.php', $editor->text);

                                eval ($editor->text);
                            }

                TabPage ToolsPanel__EvalCS ('Выполнение C# кода')
                    FastColoredTextBox ToolsPanel__EvalCSEditor
                        dock: dsFill

                        language: langCSharp
                        wordWrap: true

                    Button ToolsPanel__EvalCSButton
                        dock: dsBottom
                        height: 24

                        flatStyle: flFlat
                        flatAppearance->borderColor: clDodgerBlue
                        flatAppearance->mouseOverBackColor: clLight
                        flatAppearance->mouseDownBackColor: clLight + 10

                        text: 'Выполнить'

                        ClickEvent:^ function ($self) use (ToolsPanel__EvalCSEditor $editor)
                            {
                                file_put_contents ('system/settings/last_eval.cs', $editor->text);

                                (new WFClass ('WinForms_PHP.WFCompiler', ''))->evalCS ($editor->text, false);
                            }

                TabControl ToolsPanel__ToolsList (ToolsPanel__Container->panel2)
                    dock: dsFill
                    alignment: 1

                    ->items->addRange ([ToolsPanel__Log, ToolsPanel__EvalPHP, ToolsPanel__EvalCS])

            # Компоненты

            ColumnHeader ComponentsNamesColumn ('Название компонента')
                width: 212

            ListView ComponentsList (ComponentsPanel__Contrainer->panel2)
                dock: dsFill

                fullRowSelect: true
                multiselect: false
                headerStyle: 1
                view: vwDetails

                ->columns->add (ComponentsNamesColumn)

                ClickEvent:^ function ($self) use (Designer__FormsList $formsList)
                    {
                        $component = ltrim ($self->selectedItems[0]->text);
                        $designer = VoidStudioAPI::getObjects ('main')['Designer__'. $formsList->selectedTab->text .'Designer'];

                        if ($component == 'Указатель')
                            $designer->clearTypeForCreationOnClick ();

                        elseif ($component != 'Form')
                        {
                            $componentsInfo = json_decode (file_get_contents ('components/componentsInfo.json'), true);

                            $info = isset ($componentsInfo[$component]) ?
                                [
                                    $componentsInfo[$component]['class'],
                                    $componentsInfo[$component]['namespace']
                                ] : [
                                    "System.Windows.Forms.$component",
                                    'System.Windows.Forms'
                                ];

                            $designer->setTypeForCreationOnClick (VoidEngine::objectType (...$info));

                            $i = 1;
                            while (isset ($designer->objects[$name = $component . $i]))
                                ++$i;

                            $GLOBALS['new_component'] = [
                                $name,
                                $info
                            ];
                        }
                    }

                DoubleClickEvent:^ function ($self) use (Designer__FormsList $formsList)
                    {
                        $form      = $formsList->selectedTab->text;
                        $component = ltrim ($self->selectedItems[0]->text);
                        $designer  = VoidStudioAPI::getObjects ('main')['Designer__'. $form .'Designer'];

                        if ($component == 'Указатель')
                            $designer->clearTypeForCreationOnClick ();

                        elseif ($component == 'Form')
                        {
                            $i = substr ($form, 4) + 1;
                            while (isset (VoidStudioAPI::getObjects ('main')['Designer__'. ($form = 'Form'. $i) .'Designer']))
                                ++$i;

                            $page = new TabPage ($form);
                            $page->backgroundColor = clWhite;

                            $designer = new VoidDesigner ($page, $form, PropertiesList__List, EventsList__ActiveEvents, PropertiesPanel__SelectedComponent, $formsList);

                            $designer->initDesigner ();

                            $formsList->items->add ($page);
                            $formsList->selectedTab = $page;

                            $selector = $designer->form->selector;
                        }

                        else
                        {
                            $componentsInfo = json_decode (file_get_contents ('components/componentsInfo.json'), true);

                            $info = isset ($componentsInfo[$component]) ?
                                [
                                    $componentsInfo[$component]['class'],
                                    $componentsInfo[$component]['namespace']
                                ] : [
                                    "System.Windows.Forms.$component",
                                    'System.Windows.Forms'
                                ];

                            $i = 1;
                            while (isset ($designer->objects[$name = $component . $i]))
                                ++$i;

                            $selector = $designer->createComponent ($info, $name);

                            try
                            {
                                VoidEngine::setProperty ($selector, 'Text', $name);
                            }

                            catch (\Throwable $e) {}
                        }

                        $designer->clearTypeForCreationOnClick ();
                        $designer->setSelectedComponents ($selector);
                    }
            
            # Средство диагностики

            Panel DiagnosticToolkit (ComponentsPanel__Contrainer->panel2)
                dock: dsFill
                visible: false

                backgroundColor: clLight

                Label DiagnosticToolkit__Caption
                    bounds: [16, 16, 260, 24]
                    font: ['Segoe UI', 11]

                    caption: 'Средство диагностики'

                Label DiagnosticToolkit__UpTime
                    bounds: [16, 48, 260, 16]
                    font: ['Segoe UI', 9]

                    caption: 'Пройдено времени: 0 секунд'

                Label DiagnosticToolkit__MemoryUsage
                    bounds: [16, 64, 260, 16]
                    font: ['Segoe UI', 9]

                    caption: 'Использование памяти: 0 МБ'

                Label DiagnosticToolkit__MemoryUsagePeak
                    bounds: [16, 80, 260, 16]
                    font: ['Segoe UI', 9]

                    caption: 'Пик использования памяти: 0 МБ'

                ChartArea DiagnosticToolkit__MemoryUsageGraphArea ()
                    axes[0]->majorGrid->enabled: false
                    axes[1]->majorGrid->enabled: false
                    axes[0]->labelStyle->enabled: false

                    backColor: clLight

                Series DiagnosticToolkit__MemoryUsageGraphSeries ()
                    chartType: 15

                Chart DiagnosticToolkit__MemoryUsageGraph (DiagnosticToolkit)
                    bounds: [16, 120, DiagnosticToolkit->w - 32, 112]
                    anchor: acTop | acLeft | acRight

                    backgroundColor: clLight

                    ->chartAreas->add (DiagnosticToolkit__MemoryUsageGraphArea)
                    ->series->add (DiagnosticToolkit__MemoryUsageGraphSeries)

                Button DiagnosticToolkit__MemoryScreenshot (DiagnosticToolkit)
                    bounds: [16, 248, 168, 24]
                    backgroundColor: clWhite

                    flatStyle: flFlat
                    flatAppearance->borderColor: clWhite
                    flatAppearance->mouseOverBackColor: clLight
                    flatAppearance->mouseDownBackColor: clLight + 10

                    caption: ' Сделать снимок памяти'
                    imageAlign: alMiddleLeft
                    textAlign: alMiddleRight

                    image: (new Image)->loadFromFile (APP_DIR .'/system/icons/Camera_16x.png')

                    ClickEvent:^ function ($self) use (DiagnosticToolkit $diagnostic)
                        {
                            $save = new SaveFileDialog;
                            $save->filter = 'Memory dump file (*.dmp)|*.dmp';

                            if ($save->execute ())
                            {
                                $file = $save->fileName;
                                $prop = '-mm';

                                switch (c('DiagnosticToolkit__MemoryScreenshotSetting')->selectedItem)
                                {
                                    case 'Расширеный':
                                        $prop = '-mp';
                                    break;

                                    case 'Полный':
                                        $prop = '-ma';
                                    break;
                                }

                                c('Footer__Status')->caption = 'Создание снимка памяти проекта...';
                                c('ToolsList__ProjectRunner')->helpStorage[1]->dump ($file, $prop);
                                c('Footer__Status')->caption = 'Готово';
                            }
                        }

                ComboBox DiagnosticToolkit__MemoryScreenshotSetting (DiagnosticToolkit)
                    bounds: [16, 282, 168, 24]
                    dropDownStyle: ddDropDownList
                    flatStyle: flPopup
                    backgroundColor: clWhite

                    ->items->addRange (['Стандартный', 'Расширеный', 'Полный'])
                    selectedItem: 'Стандартный'

                Panel DiagnosticToolkit__DebugPanel (DiagnosticToolkit)
                    bounds: [8, 322, DiagnosticToolkit->w - 16, DiagnosticToolkit->h - (DiagnosticToolkit__MemoryScreenshotSetting->y + DiagnosticToolkit__MemoryScreenshotSetting->h + 32)]
                    anchor: acTop | acLeft | acRight | acBottom
                    borderStyle: 1

                    Button DebugPanel__ViewObjects
                        bounds: [8, 8, 168, 24]
                        backgroundColor: clWhite

                        flatStyle: flFlat
                        flatAppearance->borderColor: clWhite
                        flatAppearance->mouseOverBackColor: clLight
                        flatAppearance->mouseDownBackColor: clLight + 10

                        caption: ' Обозреватель объектов'
                        imageAlign: alMiddleLeft
                        textAlign: alMiddleRight

                        image: (new Image)->loadFromFile (APP_DIR .'/system/icons/StackTrace_16x.png')

                        ClickEvent:^ function ($self)
                            {
                                VoidStudioAPI::getObjects ('diagnostic')['MainForm']->showDialog ();
                            }

                    ListBox DebugPanel__ProjectLog
                        dock: dsBottom
                        height: 128

                        horizontalScrollbar: true
                        backgroundColor: clLight

                Timer DiagnosticToolkit__Ticker ()
                    interval: 1000

                    TickEvent:^ function ($self) use (DiagnosticToolkit $diagnostic, DiagnosticToolkit__UpTime $upTime, DiagnosticToolkit__MemoryUsage $memory, DiagnosticToolkit__MemoryUsagePeak $memoryPeak, DiagnosticToolkit__MemoryUsageGraph $graph, DebugPanel__ProjectLog $log)
                        {
                            $diagnostic->helpStorage->refresh ();
                            
                            if ($diagnostic->helpStorage->hasExited)
                                $self->enabled = false;

                            else
                            {
                                $elapsed = time () - $self->helpStorage;
                                
                                $upTime->caption = 'Пройдено времени: '. $time = (
                                    $elapsed >= 60 ?
                                        ($m = (int)($elapsed / 60)) .':'. (
                                            strlen ($s = $elapsed - $m * 60) == 1 ?
                                                '0'. $s :
                                                $s
                                        ) .' минут' :
                                        $elapsed .' секунд'
                                );

                                $counter = new WFObject ('System.Diagnostics.PerformanceCounter', 'System', 'Process', 'Working Set - Private', $diagnostic->helpStorage->processName);

                                try
                                {
                                    $memory->caption = 'Использование памяти: '. ($memoryUsage = round ($counter->rawValue->toString () / 1024 / 1024, 2)) .' МБ';

                                    $memoryPeak->caption = 'Пик использования памяти: '. max (substr ($memoryPeak->caption, 26, strrpos ($memoryPeak->caption, ' ') - 26), $memoryUsage) .' МБ';
                                }

                                catch (\Throwable $e) {}

                                $series = $graph->series[0];
                                
                                if ($series->points->count < 10)
                                    $series->points->addY ($memoryUsage);

                                else
                                {
                                    $points = [];

                                    $series->points->foreach (function ($item) use (&$points)
                                    {
                                        $points[] = $item->YValues[0];
                                    });

                                    $points[] = $memoryUsage;

                                    $series->points->clear ();

                                    for ($i = 0; $i < 10; ++$i)
                                    {
                                        $series->points->addY ($points[$i + 1]);
                                        $series->points[$i]->XValue = $elapsed - (10 - $i);
                                    }

                                    /*foreach ($graph->helpStorage as $timestamp => $color)
                                        if ($timestamp < $elapsed - 10)
                                            unset ($graph->helpStorage[$timestamp]);
                                        
                                        else $series->points[$timestamp]->color = $color;*/
                                }

                                $data = c('ToolsList__ProjectRunner')->helpStorage[1]->readDebugAnswer ();

                                if (is_array ($data))
                                    switch ($data['type'])
                                    {
                                        case 'beginJunkCatching':
                                            // $graph->helpStorage[$elapsed] = clYellow;
                                        break;

                                        case 'errorCatched':
                                        case 'exceptionCatched':
                                            $log->items->add ('['. $time .'ы] Поймана ошибка: '. $data['info'][1]);

                                            messageBox ('Поймана ошибка работы программы. Подробнее:'. "\n\n". print_r ($data['info'], true), 'Нарушение работы программы', enum ('System.Windows.Forms.MessageBoxButtons.OK'), enum ('System.Windows.Forms.MessageBoxIcon.Error'));
                                        break;
                                    }
                            }
                        }

    Panel Footer
        dock: dsBottom
        height: 20

        backgroundColor: clPurple

        PictureBox Footer__Icon
            bounds: [4, 2, 16, 16]

            imageLocation: APP_DIR .'/system/icons/Box_16x.png'

        Label Footer__Status
            bounds: [24, 2, Footer->width - 24, 18]
            anchor: acTop | acBottom | acLeft | acRight

            foregroundColor: clWhite
            font: ['Segoe UI', 9]
            # textAlign: alMiddleLeft

            caption: 'Запуск среды...'

    Panel Header
        dock: dsTop
        height: 28

        Button ToolsList__OpenProject
            bounds: [8, 2, 32, 24]

            flatStyle: flFlat
            flatAppearance->borderColor: clWhite
            flatAppearance->mouseOverBackColor: clLight
            flatAppearance->mouseDownBackColor: clLight + 10

            image: (new Image)->loadFromFile (APP_DIR .'/system/icons/Open_16x.png')

            ClickEvent:^ function ($self) use (Footer $footer, Footer__Status $status)
                {
                    $open = new OpenFileDialog;
                    $open->filter = 'VoidStudio Project file (*.vsp)|*.vsp';

                    if ($open->execute () && is_readable ($file = $open->fileName))
                    {
                        $status->backgroundColor = clRoyalBlue;
                        $footer->backgroundColor = clRoyalBlue;

                        $status->caption = 'Открытие проекта...';

                        VoidStudioProjectManager::openProject ($file);

                        $status->backgroundColor = clPurple;
                        $footer->backgroundColor = clPurple;
                        
                        $status->caption = 'Готово';
                    }
                }

        Button ToolsList__SaveProject
            bounds: [40, 2, 32, 24]

            flatStyle: flFlat
            flatAppearance->borderColor: clWhite
            flatAppearance->mouseOverBackColor: clLight
            flatAppearance->mouseDownBackColor: clLight + 10

            image: (new Image)->loadFromFile (APP_DIR .'/system/icons/Save_16x.png')

            ClickEvent:^ function ($self) use (Footer__Status $status)
                {
                    $status->caption = 'Сохранение проекта...';

                    VoidStudioProjectManager::saveProject (VoidStudioProjectManager::$projectPath .'/'. basename (VoidStudioProjectManager::$projectPath) .'.vsp');

                    $status->caption = 'Готово';
                }

        ComboBox ToolsList__ProjectRunConfig
            bounds: [88, 4, 88, 24]
            dropDownStyle: ddDropDownList
            flatStyle: flPopup
            backgroundColor: clLight

            ->items->addRange (['Debug', 'Release'])
            selectedItem: 'Debug'

        Button ToolsList__ProjectRunner
            bounds: [176, 2, 88, 24]

            flatStyle: flFlat
            flatAppearance->borderColor: clWhite
            flatAppearance->mouseOverBackColor: clLight
            flatAppearance->mouseDownBackColor: clLight + 10

            caption: ' Запустить'
            imageAlign: alMiddleLeft
            textAlign: alMiddleRight

            image: (new Image)->loadFromFile (APP_DIR .'/system/icons/Run_16x.png')

            ClickEvent:^ function ($self) use (Footer $footer, Footer__Status $status, Footer__Icon $statusIcon, DiagnosticToolkit $diagnostic, DiagnosticToolkit__Ticker $ticker, ComponentsList $components, PropertiesPanel__Container $properties, ToolsList__ProjectRunConfig $config, DiagnosticToolkit__DebugPanel $debugPanel, DiagnosticToolkit__MemoryUsageGraph $graph, DebugPanel__ProjectLog $log)
                {
                    if ($self->caption == ' Запустить')
                    {
                        $status->backgroundColor = clDarkOrange;
                        $footer->backgroundColor = clDarkOrange;
                        $statusIcon->imageLocation = APP_DIR .'/system/icons/Build_16x.png';
                        $status->caption = 'Запуск проекта...';

                        $graph->series[0]->points->clear ();
                        $graph->helpStorage = [];
                        $log->items->clear ();

                        $time = microtime (true);

                        usleep (100);

                        $process = VoidStudioAPI::startProject (Designer__FormsList, $isDebug = $config->selectedItem == 'Debug');

                        if ($process !== null)
                        {
                            $debugger = new VoidStudioDebugger ($process);

                            $diagnostic->visible = true;
                            $components->visible = false;
                            $config->visible     = false;
                            $debugPanel->visible = $isDebug;
                            $self->x = $config->x;

                            $self->helpStorage = [$properties->splitterDistance, $debugger];
                            $properties->splitterDistance = 0;

                            Designer__FormsList->items->foreach (function ($item)
                            {
                                VoidStudioAPI::getObjects ('main')['Designer__'. $item->text .'Designer']->control->enabled = false;
                            });

                            $status->caption = 'Готово';
                            $self->caption   = ' Остановить';

                            $time = round (microtime (true) - $time, 4);
                            $log->items->add ('Проект запущен за '. ($time > 0.5 ? $time : '[мало]') .' секунд');

                            $self->width = 96;
                            $self->image = (new Image)->loadFromFile (APP_DIR .'/system/icons/Stop_16x.png');

                            c('ProjectStatusChecker')->enabled = true;
                            $diagnostic->helpStorage = $process;
                            $ticker->helpStorage = time ();
                            $ticker->enabled = true;
                        }

                        else
                        {
                            $statusIcon->imageLocation = APP_DIR .'/system/icons/Box_16x.png';
                            
                            $status->backgroundColor = clPurple;
                            $footer->backgroundColor = clPurple;

                            $status->caption = 'Готово';
                            $self->caption   = ' Запустить';
                        }
                    }

                    else
                    {
                        $statusIcon->imageLocation = APP_DIR .'/system/icons/Box_16x.png';
                        $status->caption = 'Остановка проекта...';
                        $ticker->enabled = false;
                        c('ProjectStatusChecker')->enabled = false;

                        VoidStudioAPI::getObjects ('diagnostic')['MainForm']->hide ();
                        VoidStudioAPI::stopProject ();
                        
                        $diagnostic->visible = false;
                        $components->visible = true;
                        $config->visible     = true;
                        $self->x = $config->x + $config->w;

                        try
                        {
                            $properties->splitterDistance = $self->helpStorage[0];
                        }

                        catch (\Throwable $e)
                        {
                            $properties->splitterDistance = max (min ($properties->w - $properties->panel2MinSize, 220), 0);
                        }

                        Designer__FormsList->items->foreach (function ($item)
                        {
                            VoidStudioAPI::getObjects ('main')['Designer__'. $item->text .'Designer']->control->enabled = true;
                        });

                        $status->backgroundColor = clPurple;
                        $footer->backgroundColor = clPurple;
                        $status->caption = 'Готово';
                        $self->caption   = ' Запустить';

                        $self->width = 88;
                        $self->image = (new Image)->loadFromFile (APP_DIR .'/system/icons/Run_16x.png');
                    }
                }

        Timer ProjectStatusChecker ()
            interval: 500

            TickEvent:^ function ($self) use (ToolsList__ProjectRunner $runner)
                {
                    if ($runner->caption == ' Остановить' && VoidStudioAPI::$project->hasExited)
                        $runner->performClick ();
                }

    ToolStripMenuItem Menu__studio ('Среда')
        ToolStripMenuItem Menu__studio_restart ('Перезапустить')
            image: (new Image)->loadFromFile (APP_DIR .'/system/icons/Restart_16x.png')

            ClickEvent:^ function ($self)
                {
                    $APPLICATION->restart ();
                }

        ToolStripMenuItem Menu__studio_about ('О программе')
            image: (new Image)->loadFromFile (APP_DIR .'/system/icons/Icon.png')

            ClickEvent:^ function ($self)
                {
                    VoidStudioAPI::getObjects ('about')['MainForm']->showDialog ();
                }

        ToolStripMenuItem Menu__studio_vk ('Группа вк')
            image: (new Image)->loadFromFile (APP_DIR .'/system/icons/vk-logo-transparent.png')

            ClickEvent:^ function ($self)
                {
                    run ('https://vk.com/winforms');
                }

    #^ Здесь тупая ошибка: я не могу обратиться к ->items->addRange... т.к. этот метод вызывается от имени
        Menu__studio_vk. Типо, опять фиксить и всё такое, но мне влом пока что

    ToolStripMenuItem Menu__studio
        ->items->addRange ([Menu__studio_restart, '-', Menu__studio_about, Menu__studio_vk])

    ToolStripMenuItem Menu__project ('Проект')
        ToolStripMenuItem Menu__project_modules ('Модули')
            image: (new Image)->loadFromFile (APP_DIR .'/system/icons/Reference_16x.png')

            ClickEvent:^ function ($self)
                {
                    VoidStudioAPI::getObjects ('modules')['MainForm']->showDialog ();
                }

        ToolStripMenuItem Menu__project_compile ('Компилировать')
            image: (new Image)->loadFromFile (APP_DIR .'/system/icons/Build_16x.png')

            ClickEvent:^ function ($self)
                {
                    VoidStudioAPI::getObjects ('build')['MainForm']->showDialog ();
                }
        
        ToolStripMenuItem Menu__project_open ('Открыть')
            image: (new Image)->loadFromFile (APP_DIR .'/system/icons/Open_16x.png')

            ClickEvent:^ function ($self)
                {
                    $open = new OpenFileDialog;
                    $open->filter = 'VoidStudio Project file (*.vsp)|*.vsp';

                    if ($open->execute () && is_readable ($file = $open->fileName))
                        VoidStudioProjectManager::openProject ($file);
                }

        ToolStripMenuItem Menu__project_save ('Сохранить как')
            image: (new Image)->loadFromFile (APP_DIR .'/system/icons/Save_16x.png')
            
            ClickEvent:^ function ($self)
                {
                    $save = new SaveFileDialog;
                    $save->filter = 'VoidStudio Project file (*.vsp)|*.vsp';
                    
                    if ($save->execute () && strlen ($save = $save->fileName) > 0)
                    {
                        VoidStudioProjectManager::saveProject ($save);

                        messageBox ('Проект успешно сохранён', 'Успешное сохранение', enum ('System.Windows.Forms.MessageBoxButtons.OK'), enum ('System.Windows.Forms.MessageBoxIcon.Information'));
                    }
                }

    ToolStripMenuItem Menu__project
        ->items->addRange ([Menu__project_modules, '-', Menu__project_compile, '-', Menu__project_open, Menu__project_save])

    MenuStrip Menu
        backColor: clLight

        ->items->addRange ([Menu__studio, Menu__project])

    Timer Project_AutoSave ()
        interval: 5 * 60 * 1000

        TickEvent:^ function ($self) use (ToolsPanel__LogList $log)
            {
                VoidStudioProjectManager::saveProject (VoidStudioProjectManager::$projectPath .'/'. ($project = basename (VoidStudioProjectManager::$projectPath)) .'.vsp');

                $log->items->add ('Автосохранение проекта "'. $project .'"...');
            }

#^ И тут тоже достаточно тупая ошибка:
   Я почему-то не могу обратиться к объект, который только что создал

Form MainForm
    mainMenuStrip: Menu
    ->controls->add (Menu)

    ShownEvent:^ function ($self)
        {
            if (file_exists ('system/settings/last_eval.php'))
                ToolsPanel__EvalPHPEditor->text = file_get_contents ('system/settings/last_eval.php');

            if (file_exists ('system/settings/last_eval.cs'))
                ToolsPanel__EvalCSEditor->text = file_get_contents ('system/settings/last_eval.cs');

            PropertiesList__List->selectedObject = Designer__Form1Designer->form;
            EventsList__ActiveEvents->selectedObject = Designer__Form1Designer->form;

            $time = round (microtime (true) - $GLOBALS['__debug']['start_time'], 4);
            ToolsPanel__LogList->items->add ('VoidStudio запущен за '. ($time > 0.5 ? $time : '[мало]') .' секунд');

            if (!VoidStudioProjectManager::createProject ())
                $APPLICATION->close ();

            Project_AutoSave->enabled = true;
            Footer__Status->caption = 'Готово';
        }

    FormClosingEvent:^ function ($self) use (DiagnosticToolkit $diagnostic)
        {
            if ($diagnostic->helpStorage instanceof WFObject)
            {
                $diagnostic->helpStorage->refresh ();
                
                if (!$diagnostic->helpStorage->hasExited)
                    $diagnostic->helpStorage->kill ();
            }
        }