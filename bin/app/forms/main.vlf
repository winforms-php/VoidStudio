Form MainForm
    size: [$SCREEN->width / 1.2, $SCREEN->height / 1.2]
    windowState: fwsMaximized
    startPosition: fspCenterScreen
    backgroundColor: clWhite

    caption: 'VoidStudio'

    ->icon->loadFromFile (APP_DIR .'/Icon.ico')

    SplitContainer ToolsPanel__Container
        dock: dsFill

        Orientation: 0
        SplitterDistance: MainForm->h - 180

    TabPage ToolsPanel__Log (text ('Лог'))
        ListBox ToolsPanel__LogList
            dock: dsFill

    TabPage ToolsPanel__Eval (text ('Выполнение кода'))
        FastColoredTextBox ToolsPanel__EvalEditor
            dock: dsFill

            language: langPHP
            wordWrap: true

            # syntax: 'syntax.json'

        Button ToolsPanel__EvalButton
            dock: dsBottom

            text: text ('Выполнить')

            ClickEvent:^ function ($self) use (ToolsPanel__EvalEditor $editor)
                {
                    file_put_contents ('system/settings/last_eval.php', $editor->text);

                    eval ($editor->text);
                }

    TabControl ToolsPanel__ToolsList (ToolsPanel__Container->panel2)
        dock: dsFill

        ->items->addRange ([ToolsPanel__Log, ToolsPanel__Eval])

    Panel PropertiesPanel
        dock: dsLeft
        width: 280

        MenuItem PropertiesList__ListMenuItem (text ('Восстановить'))
            ClickEvent:^ function ($self)
                {
                    c('PropertiesList__List')->resetSelectedProperty ();
                }

        ContextMenu PropertiesList__ListMenu ()
            ->items->add (PropertiesList__ListMenuItem)

        TabPage PropertiesList__Page (text ('Свойства'))
            PropertyGrid PropertiesList__List
                dock: dsFill
                contextMenu: PropertiesList__ListMenu
                
                PropertyValueChangedEvent:^ function ($self, $args)
                    {
                        $designer    = VoidStudioAPI::getObjects ('main')['Designer__'. c('Designer__FormsList')->selectedTab->text .'Designer'];
                        $objectClass = $self->selectedObject->getType ()->toString ();
                        $newValue    = $args->changedItem->value;

                        if ($args->changedItem->label == '(Name)')
                        {
                            if ($objectClass == 'System.Windows.Forms.Form')
                            {
                                $designer->renameComponent ($self->selectedObject->selector, $args->oldValue, $args->oldValue);
                                $self->selectedObject->name = $args->oldValue;

                                pre (text ('Нельзя переименовывать формы проекта'));
                            }
                            
                            elseif (substr ($newValue, 0, 4) == 'Form')
                                {
                                    $designer->renameComponent ($self->selectedObject->selector, $args->oldValue, $args->oldValue);

                                    try
                                    {
                                        $self->selectedObject->name = $args->oldValue;
                                    }

                                    catch (\Throwable $e) {}

                                    pre (text ('Объекту нельзя задать название, начинающееся на "Form"'));
                                }

                            else try
                            {
                                $designer->renameComponent ($self->selectedObject->selector, $newValue, $args->oldValue);

                                try
                                {
                                    $self->selectedObject->name = $newValue;
                                }

                                catch (\Throwable $e) {}
                            }

                            catch (\Throwable $e)
                            {
                                $designer->renameComponent ($self->selectedObject->selector, $args->oldValue, $args->oldValue);

                                try
                                {
                                    $self->selectedObject->name = $args->oldValue;
                                }

                                catch (\Throwable $e) {}

                                pre (text ('Произошла ошибка при попытке переименования объекта'));
                            }

                            $components = c('PropertiesPanel__SelectedComponent');

                            $components->items->clear ();
                            $components->items->addRange (array_keys ($designer->objects));

                            $components->selectedItem = $designer->getComponentName ($self->selectedObject->selector);
                        }
                    }
        
        MenuItem EventsList__ListMenuItem (text ('Удалить'))
            ClickEvent:^ function ($self)
                {
                    $eventsList = c('EventsList__ActiveEvents');

                    Events::removeObjectEvent ($eventsList->selectedObject->selector, $eventsList->selectedGridItem->propertyDescriptor->customProperty->name);
                    $eventsList->selectedGridItem->propertyDescriptor->customProperty->value = '';

                    $eventsList->refresh ();
                }

        ContextMenu EventsList__ListMenu ()
            ->items->add (EventsList__ListMenuItem)

        TabPage EventsList__Page (text ('События'))
            EventGrid EventsList__ActiveEvents
                dock: dsFill
                toolbarVisible: false

                contextMenu: EventsList__ListMenu

                EventClickEvent:^ function ($self, $args)
                    {
                        VoidStudioAPI::openEventEditor ($self->selectedObject->selector, $args->customProp->name, VoidStudioAPI::getObjects ('main')['Designer__'. c('Designer__FormsList')->selectedTab->text .'Designer']);
                        
                        $args->retVal = text ('(добавлено)');
                    }

        TabControl Properties__Items
            dock: dsFill

            ->items->addRange ([PropertiesList__Page, EventsList__Page])

        ComboBox PropertiesPanel__SelectedComponent
            dock: dsTop
            dropDownStyle: ddDropDownList

            ->items->add ('Form1')
            selectedItem: 'Form1'

            SelectedIndexChangedEvent:^ function ($self)
                {
                    $item = VoidStudioAPI::getObjects ('main')['Designer__'. c('Designer__FormsList')->selectedTab->text .'Designer']->getComponentByName ($self->selectedItem);

                    PropertiesList__List->selectedObject = $item;
                }

            SelectionChangeCommittedEvent:^ function ($self)
                {
                    $designer = VoidStudioAPI::getObjects ('main')['Designer__'. c('Designer__FormsList')->selectedTab->text .'Designer'];
                    
                    $designer->setSelectedComponents ($designer->getComponentByName ($self->selectedItem));
                }

    TabPage Designer__Form1 (text ('Form1'))

    TabControl Designer__FormsList (ToolsPanel__Container->panel1)
        dock: dsFill

        ->items->add (Designer__Form1)

        SelectedIndexChangedEvent:^ function ($self) use (PropertiesPanel__SelectedComponent $components, EventsList__ActiveEvents $eventsList)
            {
                if ($self->items->count > 0)
                {
                    $designer = VoidStudioAPI::getObjects ('main')['Designer__'. ($tab = $self->selectedTab->text) .'Designer'];
                    $designer->focus ();

                    $components->items->clear ();
                    $components->items->addRange (array_keys ($designer->objects));

                    $components->selectedItem = $tab;
                    $designer->setSelectedComponents ($designer->form);
                }
            }

    VoidDesigner Designer__Form1Designer (Designer__Form1, 'Form1', PropertiesList__List, EventsList__ActiveEvents, PropertiesPanel__SelectedComponent, Designer__FormsList)
        ->initDesigner ()

    ColumnHeader ComponentsNamesColumn (text ('Название компонента'))
        width: 216

    ListView ComponentsList
        dock: dsRight
        width: 220

        fullRowSelect: true
        multiselect: false
        view: vwDetails

        ->columns->add (ComponentsNamesColumn)

        ClickEvent:^ function ($self) use (Designer__FormsList $formsList)
            {
                $component = $self->selectedItems[0]->text;

                if ($component != 'Form')
                {
                    $designer = VoidStudioAPI::getObjects ('main')['Designer__'. $formsList->selectedTab->text .'Designer'];

                    $designer->setTypeForCreationOnClick (VoidEngine::objectType (new ObjectType ("System.Windows.Forms.$component")));

                    $i = 1;
                    while (isset ($designer->objects[$name = $component . $i]))
                        ++$i;

                    $GLOBALS['new_component'] = [
                        $name,
                        new ObjectType ("System.Windows.Forms.$component")
                    ];
                }
            }

        DoubleClickEvent:^ function ($self) use (Designer__FormsList $formsList)
            {
                $form      = $formsList->selectedTab->text;
                $component = $self->selectedItems[0]->text;
                $designer  = VoidStudioAPI::getObjects ('main')['Designer__'. $form .'Designer'];

                if ($component == 'Form')
                {
                    $i = substr ($form, 4) + 1;
                    while (isset (VoidStudioAPI::getObjects ('main')['Designer__'. ($form = 'Form'. $i) .'Designer']))
                        ++$i;

                    $page     = new TabPage ($form);
                    $designer = new VoidDesigner ($page, $form, PropertiesList__List, EventsList__ActiveEvents, PropertiesPanel__SelectedComponent, $formsList);

                    $designer->initDesigner ();

                    $formsList->items->add ($page);
                    $formsList->selectedTab = $page;

                    $selector = $designer->form->selector;
                }

                else
                {
                    $i = 1;
                    while (isset ($designer->objects[$name = $component . $i]))
                        ++$i;

                    $selector = $designer->createComponent (new ObjectType ("System.Windows.Forms.$component"), $name);

                    try
                    {
                        VoidEngine::setProperty ($selector, 'Text', $name);
                    }

                    catch (\Throwable $e) {}
                }

                $designer->clearTypeForCreationOnClick ();
                $designer->setSelectedComponents ($selector);
            }

    MenuItem Menu__studio (text ('Среда'))
        MenuItem Menu__studio_restart (text ('Перезапустить'))
            ClickEvent:^ function ($self)
                {
                    $APPLICATION->restart ();
                }

        MenuItem Menu__studio_about (text ('О программе'))
            ClickEvent:^ function ($self)
                {
                    VoidStudioAPI::getObjects ('about')['MainForm']->showDialog ();
                }

        MenuItem Menu__studio_vk (text ('Группа вк'))
            ClickEvent:^ function ($self)
                {
                    run ('https://vk.com/winforms');
                }

    #^ Здесь тупая ошибка: я не могу обратиться к ->items->addRange... т.к. этот метод вызывается от имени
       Menu__studio_about. Типо, опять фиксить и всё такое, но мне влом пока что

    MenuItem Menu__studio
        ->items->addRange ([Menu__studio_restart, '-', Menu__studio_about, Menu__studio_vk])

    MenuItem Menu__project (text ('Проект'))
        MenuItem Menu__project_run (text ('Запустить'))
            ClickEvent:^ function ($self)
                {
                    (new Process)->getProcessesByName ('vstmpprj')->foreach (function ($index, $value)
                    {
                        $process = new WFObject ($value);

                        $process->kill ();
                        $process->waitForExit ();
                    });

                    VoidStudioBuilder::compileProject (getenv ('Temp') .'/vstmpprj.exe', Designer__FormsList->items[0]->text, VoidStudioBuilder::getReferences (ENGINE_DIR .'/VoidEngine.php'), false);

                    run (getenv ('Temp') .'/vstmpprj/vstmpprj.exe');
                }

        MenuItem Menu__project_stop (text ('Остановить'))
            ClickEvent:^ function ($self)
                {
                    (new Process)->getProcessesByName ('vstmpprj')->foreach (function ($index, $value)
                    {
                        $process = new WFObject ($value);
                        
                        $process->kill ();
                        $process->waitForExit ();
                    });
                }

        MenuItem Menu__project_compile (text ('Компилировать'))
            ClickEvent:^ function ($self)
                {
                    VoidStudioAPI::getObjects ('build')['MainForm']->showDialog ();
                }
        
        MenuItem Menu__project_open (text ('Открыть'))
            ClickEvent:^ function ($self)
                {
                    $open = new OpenFileDialog;
                    $open->filter = 'VoidStudio Project file (*.vsp)|*.vsp';

                    if ($open->execute () && is_readable ($file = $open->fileName))
                        VoidStudioProjectManager::openProject ($file);
                }

        MenuItem Menu__project_save (text ('Сохранить'))
            ClickEvent:^ function ($self)
                {
                    $save = new SaveFileDialog;
                    $save->filter = 'VoidStudio Project file (*.vsp)|*.vsp';
                    
                    if ($save->execute () && strlen ($save = $save->fileName) > 0)
                    {
                        VoidStudioProjectManager::saveProject ($save);

                        pre (text ('Проект успешно сохранён'));
                    }
                }

    MenuItem Menu__project
        ->items->addRange ([Menu__project_run, Menu__project_stop, Menu__project_compile, '-', Menu__project_open, Menu__project_save])

    MainMenu Menu
        ->items->addRange ([Menu__studio, Menu__project])

#^ И тут тоже достаточно тупая ошибка:
   Я почему-то не могу обратиться к объект, который только что создал

Form MainForm
    menu: Menu

    ShownEvent:^ function ($self)
        {
            if (file_exists ('system/settings/last_eval.php'))
                ToolsPanel__EvalEditor->text = file_get_contents ('system/settings/last_eval.php');

            PropertiesList__List->selectedObject = Designer__Form1Designer->form;
            EventsList__ActiveEvents->selectedObject = Designer__Form1Designer->form;

            $time = round (microtime (true) - $GLOBALS['__debug']['start_time'], 4);

            ToolsPanel__LogList->items->add (text ('VoidStudio запущен за '. ($time > 0.5 ? $time : '[мало]') .' секунд'));
        }